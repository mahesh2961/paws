// Generated by Dagger (https://google.github.io/dagger).
package in.paws.database;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RoomModule_ProvidesBreadDaoFactory implements Factory<DogBreedDao> {
  private final RoomModule module;

  private final Provider<AppDatabase> databaseProvider;

  public RoomModule_ProvidesBreadDaoFactory(
      RoomModule module, Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public DogBreedDao get() {
    return provideInstance(module, databaseProvider);
  }

  public static DogBreedDao provideInstance(
      RoomModule module, Provider<AppDatabase> databaseProvider) {
    return proxyProvidesBreadDao(module, databaseProvider.get());
  }

  public static RoomModule_ProvidesBreadDaoFactory create(
      RoomModule module, Provider<AppDatabase> databaseProvider) {
    return new RoomModule_ProvidesBreadDaoFactory(module, databaseProvider);
  }

  public static DogBreedDao proxyProvidesBreadDao(RoomModule instance, AppDatabase database) {
    return Preconditions.checkNotNull(
        instance.providesBreadDao(database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
